}
for (i in 1:length(ids[,1])){
print(ids[i,1])
print(biz[which(biz$business_id == id),])
}
cols = c('business_id','name','address','city','state','stars','review_count')
business <- data.frame(matrix(nrow = 0, ncol = length(cols)))
business
colnames(business) <- cols
business
for (i in 1:length(ids[,1])){
print(ids[i,1])
print(biz[which(biz$business_id == id),])
}
business[nrow(business)+1,] = biz[which(biz$business_id == id),]
for (i in 1:length(ids[,1])){
print(ids[i,1])
business[nrow(business)+1,] = biz[which(biz$business_id == id),]
}
business
head(business)
cols = c('business_id','name','address','city','state','stars','review_count')
business <- data.frame(matrix(nrow = 0, ncol = length(cols)))
colnames(business) <- cols
business
for (i in 1:length(ids[,1])){
print(ids[i,1])
business[nrow(business)+1,] = biz[which(biz$business_id == i),]
}
cols = c('business_id','name','address','city','state','stars','review_count')
business <- data.frame(matrix(nrow = 0, ncol = length(cols)))
colnames(business) <- cols
business
for (i in 1:length(ids[,1])){
print(ids[i,1])
business[nrow(business)+1,] = biz[which(biz$business_id == ids[i,1]),]
}
head(business)
unique(business$state)
subset(business,business$state == "OR")
subset(business,business$state == "OR")$city
subset(business,business$state == "OR")$city.unique
subset(business,business$state == "OR")$city.unique()
unique(subset(business,business$state == "OR")$city)
#get businesses
subset(business,business$state == "OR" & business$city == "Portland")$name
#get businesses
unique(subset(business,business$state == "OR" & business$city == "Portland")$name)
subset(business,business$state == "OR" & business$city == "Portland")$name
head(business)
#get business address
unique(subset(business,business$state == "OR" & business$city == "Portland" & business$name == "Ruby Jewel")$address)
#get business address
subset(business,business$state == "OR" & business$city == "Portland" & business$name == "Ruby Jewel")$address
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
#get city options
sort(unique(subset(business,business$state == "OR")$city))
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp()
shop <-  'The Waffle Window'
city <- 'Portland'
period <- "pre covid"
state <- "OR"
suggestions = main_func(shop, city, state, period)
length(suggestions)
good_suggestion = suggestions[0:1]
bad_suggestion = suggestions[2:2]
good_suggestion
shop <-  'The Waffle Window'
city <- 'Portland'
period <- "pre covid"
state <- "OR"
suggestions = main_func(shop, city, state, period)
length(suggestions)
good_suggestion = suggestions[0:1]
bad_suggestion = suggestions[2:2]
good_suggestion
main_func(shop, city, state, period)[0:1]
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
typeof(main_func(shop, city, state, period)[0:1])
runApp('Documents/GitHub/Group2_628_Module3/app')
suggestions[2:2]
suggestions[2]
suggestions-1
suggestions[1]
suggestions[0]
suggestions[1]
as.character(suggestions[2])
suggestions[2]
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
as.dataframe(suggestions[1])
as.data.frame(suggestions[1])
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
as.data.frame(suggestions[1])
as.data.frame(suggestions[1],colnames=FALSE)
unname(as.data.frame(suggestions[1]))
runApp('Documents/GitHub/Group2_628_Module3/app')
unname(as.data.frame(suggestions[1]))
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='maritmcquaig', token='00FD08E1D1B4E68D969889C16F285885', secret='2R7ugdbIw8wRtKeD/tL5S7V28ufjqfMndSnl6cnd')
library(rsconnect)
deployApp()
options(rsconnect.max.bundle.size=3145728000)
deployApp()
runApp('Documents/GitHub/Group2_628_Module3/app')
runApp('Documents/GitHub/Group2_628_Module3/app')
c <- read.csv("Data/covid.csv")
#business details
c <- read.csv("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/Data/covid.csv")
getwd()
setwd(/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/)
setwd("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/")
#business details
c <- read.csv("Data/covid.csv")
pc <- read.csv("Data/precovid.csv")
biz <- read.csv("Data/clean_business.csv")
runApp('app')
runApp('app')
runApp('app')
deployApp("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/")
deployApp("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/app")
deployApp("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/shiny")
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(tidyverse)
library(shinyWidgets)
library(png)
library(ggplot2)
library(dplyr)
library(lubridate)
library(scales)
library(reticulate)
library(rsconnect)
setwd("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/")
#for reticulate
#use_python('/Library/Frameworks/Python.framework/Versions/3.8/bin/python3', require=T)
source_python("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/generate_suggestions.py")
#business details
c <- read.csv("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/covid.csv")
pc <- read.csv("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/precovid.csv")
biz <- read.csv("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/clean_business.csv")
cbiz <- c['business_id']
pcbiz <- pc['business_id']
ids <- unique(intersect(cbiz,pcbiz))
biz <- biz[c('business_id','name','address','city','state','stars','review_count')]
cols = c('business_id','name','address','city','state','stars','review_count')
business <- data.frame(matrix(nrow = 0, ncol = length(cols)))
colnames(business) <- cols
for (i in 1:length(ids[,1])){
business[nrow(business)+1,] = biz[which(biz$business_id == ids[i,1]),]
}
pcdates <- pc %>% count(date)
#plot
pc$date <- format(as.POSIXct(pc$date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
c$date <- format(as.POSIXct(c$date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
cdates <- c %>% count(date)
pcdates <- pcdates %>% add_column(covid = "Pre-Covid-19")
cdates <- cdates %>% add_column(covid = "Covid-19")
alldates <- rbind(pcdates,cdates)
header <- dashboardHeader(title = "COVID-19 & Ice Cream Shops in the US")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Data", tabName = "data"),
menuItem("Key Findings", tabName = "results"),
menuItem("Business Suggestions", tabName = "suggestions")
)
)
body <- dashboardBody(
setBackgroundImage(
src = "icstock.jpeg",
shinydashboard = TRUE
),
tabItems(
tabItem(tabName = "data",
h2("Yelp Reviews of Ice Cream Shops Since 03/2019"),
fluidRow(box(plotOutput("plot1", height = 250))),
fluidRow(box(
h5("All conclusions presented on this site come from Yelp reviews left from March 2019 through January 2021. Since shutdowns associated with Covid-19 began in the United States around mid-march, we split our dataset into two around that time. We also removed a one month window of data (3/1/20-4/1/20), to avoid any confusion in reviews left around the very early stages of the pandemic and to account for different states closing down at different rates. "),
title = "Data Description"))
),
tabItem(tabName = "results",
h2("Key Findings")
),
tabItem(tabName = "suggestions",
h2("Business Suggestions"),
selectInput("state", "Choose a state/province:",
choices = c('BC', 'CO', 'FL', 'GA', 'MA', 'OR', 'TX')),
uiOutput("city"),
uiOutput("shop"),
selectInput("period","Choose a time period:",
choices = c("pre covid", "covid")),
fluidRow(box(tableOutput("good"),title = "What's going right for your shop:")),
fluidRow(box(tableOutput("bad"),title = "Where your shop can improve:"))
)
)
)
footer = dashboardFooter(
left = "Questions about this information? Contact mcquaig@wisc.edu",
right = NULL
)
ui <- dashboardPage(header,
sidebar,
body,
controlbar = NULL,
footer)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
ggplot(alldates)+
geom_point(aes(x = as.Date(date), y = n, col = covid))+
geom_vline(xintercept = as.numeric(as.Date('2020-03-01')), col = "black")+
geom_vline(xintercept = as.numeric(as.Date('2020-04-01')), col = "black")+
xlab("Date")+
ylab("Number of Reviews")+
labs(col = "Time Period")
})
output$city <- renderUI ({
selectInput("city", "Choose a city:", choices = sort(unique(subset(business,business$state == input$state)$city)))
})
output$shop <- renderUI ({
selectInput("shop","Choose a business:", choices = sort(unique(subset(business,business$state == input$state & business$city == input$city)$name)))
})
output$good <- renderTable({
unname(as.data.frame(main_func(input$shop, input$city, input$state, input$period)[1]))
})
output$bad <- renderTable({
unname(as.data.frame(main_func(input$shop, input$city, input$state, input$period)[2]))
})
}
shinyApp(ui = ui, server = server)
options(rsconnect.max.bundle.size=3145728000)
deployApp("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/shiny")
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(tidyverse)
library(shinyWidgets)
library(png)
library(ggplot2)
library(dplyr)
library(lubridate)
library(scales)
library(reticulate)
library(rsconnect)
setwd("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/")
#for reticulate
#use_python('/Library/Frameworks/Python.framework/Versions/3.8/bin/python3', require=T)
source_python("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/generate_suggestions.py")
#business details
c <- read.csv("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/covid.csv")
pc <- read.csv("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/precovid.csv")
biz <- read.csv("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/clean_business.csv")
cbiz <- c['business_id']
pcbiz <- pc['business_id']
ids <- unique(intersect(cbiz,pcbiz))
biz <- biz[c('business_id','name','address','city','state','stars','review_count')]
cols = c('business_id','name','address','city','state','stars','review_count')
business <- data.frame(matrix(nrow = 0, ncol = length(cols)))
colnames(business) <- cols
for (i in 1:length(ids[,1])){
business[nrow(business)+1,] = biz[which(biz$business_id == ids[i,1]),]
}
pcdates <- pc %>% count(date)
c$date <- format(as.POSIXct(c$date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
cdates <- c %>% count(date)
pcdates <- pcdates %>% add_column(covid = "Pre-Covid-19")
#plot
pc$date <- format(as.POSIXct(pc$date,format='%Y-%m-%d %H:%M:%S'),format='%Y-%m-%d')
cdates <- cdates %>% add_column(covid = "Covid-19")
alldates <- rbind(pcdates,cdates)
header <- dashboardHeader(title = "COVID-19 & Ice Cream Shops in the US")
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Data", tabName = "data"),
menuItem("Key Findings", tabName = "results"),
menuItem("Business Suggestions", tabName = "suggestions")
)
)
body <- dashboardBody(
setBackgroundImage(
src = "icstock.jpeg",
shinydashboard = TRUE
),
tabItems(
tabItem(tabName = "data",
h2("Yelp Reviews of Ice Cream Shops Since 03/2019"),
fluidRow(box(plotOutput("plot1", height = 250))),
fluidRow(box(
h5("All conclusions presented on this site come from Yelp reviews left from March 2019 through January 2021. Since shutdowns associated with Covid-19 began in the United States around mid-march, we split our dataset into two around that time. We also removed a one month window of data (3/1/20-4/1/20), to avoid any confusion in reviews left around the very early stages of the pandemic and to account for different states closing down at different rates. "),
title = "Data Description"))
),
tabItem(tabName = "results",
h2("Key Findings")
),
tabItem(tabName = "suggestions",
h2("Business Suggestions"),
selectInput("state", "Choose a state/province:",
choices = c('BC', 'CO', 'FL', 'GA', 'MA', 'OR', 'TX')),
uiOutput("city"),
uiOutput("shop"),
selectInput("period","Choose a time period:",
choices = c("pre covid", "covid")),
fluidRow(box(tableOutput("good"),title = "What's going right for your shop:")),
fluidRow(box(tableOutput("bad"),title = "Where your shop can improve:"))
)
)
)
footer = dashboardFooter(
left = "Questions about this information? Contact mcquaig@wisc.edu",
right = NULL
)
ui <- dashboardPage(header,
sidebar,
body,
controlbar = NULL,
footer)
server <- function(input, output, session) {
output$plot1 <- renderPlot({
ggplot(alldates)+
geom_point(aes(x = as.Date(date), y = n, col = covid))+
geom_vline(xintercept = as.numeric(as.Date('2020-03-01')), col = "black")+
geom_vline(xintercept = as.numeric(as.Date('2020-04-01')), col = "black")+
xlab("Date")+
ylab("Number of Reviews")+
labs(col = "Time Period")
})
output$city <- renderUI ({
selectInput("city", "Choose a city:", choices = sort(unique(subset(business,business$state == input$state)$city)))
})
output$shop <- renderUI ({
selectInput("shop","Choose a business:", choices = sort(unique(subset(business,business$state == input$state & business$city == input$city)$name)))
})
output$good <- renderTable({
unname(as.data.frame(main_func(input$shop, input$city, input$state, input$period)[1]))
})
output$bad <- renderTable({
unname(as.data.frame(main_func(input$shop, input$city, input$state, input$period)[2]))
})
}
shinyApp(ui = ui, server = server)
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
#use_python('/Library/Frameworks/Python.framework/Versions/3.8/bin/python3', require=T)
source_python("generate_suggestions.py")
runApp('shiny')
shiny::runApp(app_dir)
runApp('shiny')
deployApp()
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/shiny")
runApp('shiny')
#options(rsconnect.max.bundle.size=3145728000)
deployApp("/Users/maritmcquaig/Documents/GitHub/Group2_628_Module3/shiny")
runApp('shiny')
runApp('shiny')
runApp('shiny')
runApp()
runApp()
shinyApp(ui = ui, server = server)
runApp('shiny')
runApp()
runApp('shiny')
runApp('shiny')
runApp('~/Documents/stat628/shiny')
runApp('~/Documents/stat628/shiny')
hist.spy.df <- read.csv("HistoricalPrices.csv")
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
library(gridExtra)
hist.spy.df <- read.csv("HistoricalPrices.csv")
hist.spy.df$Date <- as.Date(hist.spy.df$Date, "%m/%d/%y")
hist.spy.df<-hist.spy.df[nrow(hist.spy.df):1,]
close.diff <- diff(as.matrix(hist.spy.df$Close))
close.diff <- rbind(0,close.diff)
hist.spy.df$differential <- close.diff[,1]
wsb.sent.df <- read.csv("combined_sentiment.csv")
wsb.sent.df$total_sent <- wsb.sent.df$ave_sentiment * wsb.sent.df$day_count
wsb.agg.df <- aggregate(cbind(total_sent, day_count) ~ day, wsb.sent.df, FUN=sum)
wsb.agg.df$day <- as.Date(wsb.agg.df$day)
wsb.agg.df$avg_sent <- wsb.agg.df$total_sent/ wsb.agg.df$day_count
wsb.agg.df <- wsb.agg.df[order(wsb.agg.df$day), ]
combined.df <- merge(wsb.agg.df,hist.spy.df, by.x="day",by.y="Date")
# Calculate Cumulative Sentiment
combined.df$sent_cumsum <- cumsum(combined.df$total_sent)
# Calculate cumulative average sentiment
combined.df$avgsent_cumsum <- cumsum(combined.df$avg_sent)
ggplot(combined.df, aes(x=day)) +
geom_line(aes(y=avgsent_cumsum, color='Avg Sent Sum')) +
geom_line(aes(y=Close / 129, color='SPY Close')) +
scale_y_continuous(name="r/wallstreebets Average Cumulative Sentiment", sec.axis = sec_axis(~.*129,name="SPY $ Close")) +
xlab("Date") +
scale_color_manual("Plot Lines",values = c("Avg Sent Sum"="red2","SPY Close"="cyan3")) +
ggtitle("Cumulative Average Sentiment of WSB with SPY Closing Value") +
theme(legend.position = c(0.8,0.2))
ggplot(combined.df, aes(x=day)) +
geom_line(aes(y=avg_sent, color='Sentiment')) +
geom_line(aes(y=differential / 290, color='Differential')) +
scale_y_continuous(name="r/wallstreebets Average Sentiment", sec.axis = sec_axis(~.*290,name="SPY $ Differential")) +
xlab("Date") +
ggtitle("Average Daily WSB Sentiment Compared to SPY Daily Change") +
scale_color_manual("Plot Lines",values = c("Sentiment"="red2","Differential"="blue2")) +
scale_x_date(date_breaks = "2 month",
limits = as.Date(c('2020-07-01','2021-02-16'))) +
theme(legend.position = c(0.12,0.85))
ggplot(combined.df, aes(x=day)) +
geom_line(aes(y=avg_sent, color='Sentiment')) +
geom_line(aes(y=differential / 290, color='Differential')) +
scale_y_continuous(name="r/wallstreebets Average Sentiment", sec.axis = sec_axis(~.*290,name="SPY $ Differential")) +
xlab("Date") +
ggtitle("Average Daily WSB Sentiment Compared to SPY Daily Change") +
scale_color_manual("Plot Lines",values = c("Sentiment"="red2","Differential"="blue2")) +
scale_x_date(date_breaks = "2 month",
limits = as.Date(c('2020-07-01','2021-02-16'))) +
theme(legend.position = c(0.12,0.85))
ggplot(combined.df, aes(x=day)) +
geom_line(aes(y=avg_sent, color='Sentiment')) +
geom_line(aes(y=differential / 290, color='Differential')) +
scale_y_continuous(name="r/wallstreebets Average Sentiment", sec.axis = sec_axis(~.*290,name="SPY $ Differential")) +
xlab("Date") +
ggtitle("Average Daily WSB Sentiment Compared to SPY Daily Change") +
scale_color_manual("Plot Lines",values = c("Sentiment"="red2","Differential"="blue2")) +
scale_x_date(date_breaks = "2 month",
limits = as.Date(c('2020-01-01','2020-07-01'))) +
theme(legend.position = c(0.12,0.85))
ggplot(combined.df, aes(x=day)) +
geom_line(aes(y=avg_sent, color='Sentiment')) +
geom_line(aes(y=differential / 290, color='Differential')) +
scale_y_continuous(name="r/wallstreebets Average Sentiment", sec.axis = sec_axis(~.*290,name="SPY $ Differential")) +
xlab("Date") +
ggtitle("Average Daily WSB Sentiment Compared to SPY Daily Change") +
scale_color_manual("Plot Lines",values = c("Sentiment"="red2","Differential"="blue2")) +
scale_x_date(date_breaks = "2 month",
limits = as.Date(c('2020-01-01','2020-07-01'))) +
theme(legend.position = c(0.12,0.85))
ggplot(combined.df, aes(x=day)) +
geom_line(aes(y=avg_sent, color='Sentiment')) +
geom_line(aes(y=differential / 290, color='Differential')) +
scale_y_continuous(name="r/wallstreebets Average Sentiment", sec.axis = sec_axis(~.*290,name="SPY $ Differential")) +
xlab("Date") +
ggtitle("Average Daily WSB Sentiment Compared to SPY Daily Change") +
scale_color_manual("Plot Lines",values = c("Sentiment"="red2","Differential"="blue2")) +
scale_x_date(date_breaks = "2 month",
limits = as.Date(c('2019-07-01','2020-01-01'))) +
theme(legend.position = c(0.12,0.85))
library(openxlsx)
c <- read.xlsx("covid.xlsx")
c <- read.csv("covid.csv")
c <- read.csv("covid.csv")
runApp('~/Documents/stat628/shiny')
library(shiny)
library(shinydashboard)
library(shinydashboardPlus)
library(tidyverse)
library(shinyWidgets)
library(png)
library(ggplot2)
runApp('~/Documents/stat628/shiny')
library(ggplot2)
detach(package:WGCNA)
